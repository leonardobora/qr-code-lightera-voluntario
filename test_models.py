"""
Testes b√°sicos para validar os modelos SQLite
Este script testa as funcionalidades principais dos modelos de dados.
"""

import os
import tempfile
from models import DatabaseManager, Funcionario, Evento, QRCode, EventType, QRCodeStatus


def test_database_creation():
    """Testa a cria√ß√£o do banco de dados"""
    print("üß™ Testando cria√ß√£o do banco de dados...")
    
    # Usar arquivo tempor√°rio para teste
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_file:
        db_path = tmp_file.name
    
    try:
        db_manager = DatabaseManager(db_path)
        
        # Verificar se o arquivo foi criado
        assert os.path.exists(db_path), "Arquivo do banco n√£o foi criado"
        
        # Testar conex√£o
        with db_manager.get_connection() as conn:
            cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = [row[0] for row in cursor.fetchall()]
            
            expected_tables = ['funcionarios', 'eventos', 'qr_codes']
            for table in expected_tables:
                assert table in tables, f"Tabela {table} n√£o foi criada"
        
        print("   ‚úÖ Banco de dados criado com sucesso")
        return db_manager
        
    except Exception as e:
        print(f"   ‚ùå Erro na cria√ß√£o do banco: {e}")
        raise
    finally:
        # Limpar arquivo tempor√°rio
        if os.path.exists(db_path):
            os.unlink(db_path)


def test_funcionario_operations():
    """Testa opera√ß√µes CRUD de funcion√°rios"""
    print("üß™ Testando opera√ß√µes de funcion√°rios...")
    
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_file:
        db_path = tmp_file.name
    
    try:
        db_manager = DatabaseManager(db_path)
        funcionario_model = Funcionario(db_manager)
        
        # Teste de cria√ß√£o
        func_id = funcionario_model.criar(
            nome="Test User",
            email="test@example.com",
            cargo="Teste",
            telefone="11999999999"
        )
        assert func_id > 0, "ID do funcion√°rio deve ser positivo"
        print("   ‚úÖ Funcion√°rio criado")
        
        # Teste de busca por ID
        funcionario = funcionario_model.buscar_por_id(func_id)
        assert funcionario is not None, "Funcion√°rio deve ser encontrado"
        assert funcionario['nome'] == "Test User", "Nome deve coincidir"
        assert funcionario['email'] == "test@example.com", "Email deve coincidir"
        print("   ‚úÖ Busca por ID funcionando")
        
        # Teste de busca por email
        funcionario = funcionario_model.buscar_por_email("test@example.com")
        assert funcionario is not None, "Funcion√°rio deve ser encontrado por email"
        assert funcionario['id'] == func_id, "ID deve coincidir"
        print("   ‚úÖ Busca por email funcionando")
        
        # Teste de atualiza√ß√£o
        sucesso = funcionario_model.atualizar(func_id, nome="Test User Updated")
        assert sucesso, "Atualiza√ß√£o deve ter sucesso"
        
        funcionario_atualizado = funcionario_model.buscar_por_id(func_id)
        assert funcionario_atualizado['nome'] == "Test User Updated", "Nome deve estar atualizado"
        print("   ‚úÖ Atualiza√ß√£o funcionando")
        
        # Teste de listagem
        funcionarios = funcionario_model.listar_ativos()
        assert len(funcionarios) == 1, "Deve haver 1 funcion√°rio ativo"
        print("   ‚úÖ Listagem funcionando")
        
        # Teste de desativa√ß√£o
        sucesso = funcionario_model.desativar(func_id)
        assert sucesso, "Desativa√ß√£o deve ter sucesso"
        
        funcionarios_ativos = funcionario_model.listar_ativos()
        assert len(funcionarios_ativos) == 0, "N√£o deve haver funcion√°rios ativos"
        print("   ‚úÖ Desativa√ß√£o funcionando")
        
    except Exception as e:
        print(f"   ‚ùå Erro nos testes de funcion√°rio: {e}")
        raise
    finally:
        if os.path.exists(db_path):
            os.unlink(db_path)


def test_evento_operations():
    """Testa opera√ß√µes CRUD de eventos"""
    print("üß™ Testando opera√ß√µes de eventos...")
    
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_file:
        db_path = tmp_file.name
    
    try:
        db_manager = DatabaseManager(db_path)
        funcionario_model = Funcionario(db_manager)
        evento_model = Evento(db_manager)
        
        # Criar funcion√°rio primeiro
        func_id = funcionario_model.criar("Test User", "test@example.com")
        
        # Teste de cria√ß√£o de evento
        evento_id = evento_model.criar(
            nome="Evento Teste",
            tipo=EventType.FESTA,
            responsavel_id=func_id,
            descricao="Evento para teste",
            local="Local Teste"
        )
        assert evento_id > 0, "ID do evento deve ser positivo"
        print("   ‚úÖ Evento criado")
        
        # Teste de busca por ID
        evento = evento_model.buscar_por_id(evento_id)
        assert evento is not None, "Evento deve ser encontrado"
        assert evento['nome'] == "Evento Teste", "Nome deve coincidir"
        assert evento['tipo'] == EventType.FESTA.value, "Tipo deve coincidir"
        print("   ‚úÖ Busca por ID funcionando")
        
        # Teste de listagem por tipo
        eventos_festa = evento_model.listar_por_tipo(EventType.FESTA)
        assert len(eventos_festa) == 1, "Deve haver 1 evento do tipo festa"
        print("   ‚úÖ Listagem por tipo funcionando")
        
        # Teste de atualiza√ß√£o
        sucesso = evento_model.atualizar(evento_id, nome="Evento Teste Atualizado")
        assert sucesso, "Atualiza√ß√£o deve ter sucesso"
        
        evento_atualizado = evento_model.buscar_por_id(evento_id)
        assert evento_atualizado['nome'] == "Evento Teste Atualizado", "Nome deve estar atualizado"
        print("   ‚úÖ Atualiza√ß√£o funcionando")
        
    except Exception as e:
        print(f"   ‚ùå Erro nos testes de evento: {e}")
        raise
    finally:
        if os.path.exists(db_path):
            os.unlink(db_path)


def test_qrcode_operations():
    """Testa opera√ß√µes CRUD de QR codes"""
    print("üß™ Testando opera√ß√µes de QR codes...")
    
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_file:
        db_path = tmp_file.name
    
    try:
        db_manager = DatabaseManager(db_path)
        funcionario_model = Funcionario(db_manager)
        evento_model = Evento(db_manager)
        qr_model = QRCode(db_manager)
        
        # Criar funcion√°rio e evento primeiro
        func_id = funcionario_model.criar("Test User", "test@example.com")
        evento_id = evento_model.criar("Evento Teste", EventType.FESTA, func_id)
        
        # Teste de cria√ß√£o de QR code
        qr_id = qr_model.criar(
            codigo="TEST_QR_001",
            evento_id=evento_id,
            funcionario_criador_id=func_id,
            destinatario_nome="Test Recipient",
            quantidade=2
        )
        assert qr_id > 0, "ID do QR code deve ser positivo"
        print("   ‚úÖ QR Code criado")
        
        # Teste de busca por c√≥digo
        qr_data = qr_model.buscar_por_codigo("TEST_QR_001")
        assert qr_data is not None, "QR code deve ser encontrado"
        assert qr_data['codigo'] == "TEST_QR_001", "C√≥digo deve coincidir"
        assert qr_data['destinatario_nome'] == "Test Recipient", "Destinat√°rio deve coincidir"
        print("   ‚úÖ Busca por c√≥digo funcionando")
        
        # Teste de valida√ß√£o
        valido, mensagem = qr_model.validar_codigo("TEST_QR_001")
        assert valido, f"C√≥digo deve ser v√°lido: {mensagem}"
        print("   ‚úÖ Valida√ß√£o funcionando")
        
        # Teste de uso do c√≥digo
        sucesso = qr_model.usar_codigo("TEST_QR_001")
        assert sucesso, "Uso do c√≥digo deve ter sucesso"
        
        # Verificar se c√≥digo foi marcado como usado
        qr_usado = qr_model.buscar_por_codigo("TEST_QR_001")
        assert qr_usado['status'] == QRCodeStatus.USADO.value, "Status deve ser 'usado'"
        print("   ‚úÖ Uso do c√≥digo funcionando")
        
        # Teste de valida√ß√£o de c√≥digo usado
        valido, mensagem = qr_model.validar_codigo("TEST_QR_001")
        assert not valido, "C√≥digo usado n√£o deve ser v√°lido"
        assert "j√° foi utilizado" in mensagem, "Mensagem deve indicar que foi usado"
        print("   ‚úÖ Valida√ß√£o de c√≥digo usado funcionando")
        
        # Teste de estat√≠sticas
        stats = qr_model.estatisticas_por_evento(evento_id)
        assert stats['usado'] == 1, "Deve haver 1 c√≥digo usado"
        assert stats['total'] == 1, "Total deve ser 1"
        print("   ‚úÖ Estat√≠sticas funcionando")
        
    except Exception as e:
        print(f"   ‚ùå Erro nos testes de QR code: {e}")
        raise
    finally:
        if os.path.exists(db_path):
            os.unlink(db_path)


def run_all_tests():
    """Executa todos os testes"""
    print("üß™ Iniciando testes dos modelos SQLite...\n")
    
    try:
        test_database_creation()
        test_funcionario_operations()
        test_evento_operations()
        test_qrcode_operations()
        
        print("\n‚úÖ Todos os testes passaram com sucesso!")
        print("üéâ Os modelos SQLite est√£o funcionando corretamente!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Falha nos testes: {e}")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    exit(0 if success else 1)